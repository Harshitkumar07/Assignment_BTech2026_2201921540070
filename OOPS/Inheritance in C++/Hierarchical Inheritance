In C++, hierarchical inheritance occurs when multiple derived classes inherit from a single base class. This means that you have a single base class, and several classes are derived from it.

Refer to code, we have an example of hierarchical inheritance in C++:

We have a base class Animal with two methods, Eat and Sleep, and a protected member name.
We then create derived classes Dog which inherit from the Animal class.
These derived classes add their own specific behaviors (Bark for Dog and Meow for Cat).
Since the visibility mode is public the public method (eat) of the animal can be used from derived class.
We then create derived classes Cat which inherit from the Animal class.
Since the visibility mode is private the public method (eat) of the animal can not be used from derived class.
In the main() function, we create instances of both Dog and Cat, and we call methods from both the base class and the derived classes for each object.

Purpose of private Inheritance:
In the given C++ code, the line class Cat : private Animal specifies that the Cat class is inheriting privately from the Animal class.
When a class inherits privately from another class, the public and protected members of the base class become private members of the derived class.
This means that they are not accessible from outside the Cat class or its derived classes.

** ANSWER **

#include <iostream>

using namespace std;

// Base class
class Animal {
    protected: string name;

    public: Animal(string _name): name(_name) {}

    void Eat() {
        cout << name << " is eating." << endl;
    }
};

// Derived class 1
class Dog: public Animal {
    public: Dog(string _name): Animal(_name) {}

    void Bark() {
        cout << name << " is barking." << endl;
    }
};

// Derived class 2
class Cat: private Animal {
    public: Cat(string _name): Animal(_name) {}

    void Meow() {
        cout << name << " is meowing." << endl;
    }
};

int main() {
    // Create instances of derived classes
    Dog myDog("Buddy");
    Cat myCat("Whiskers");

    // Call methods from the base class and derived classes
    myDog.Eat();
    myDog.Bark();

    myCat.Meow();

    return 0;
}
