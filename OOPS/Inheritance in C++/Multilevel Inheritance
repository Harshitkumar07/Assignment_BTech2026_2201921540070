In C++, multilevel inheritance involves a chain of inheritance, where a derived class inherits from a base class, and then another class inherits from that derived class.

In this example, We will demonstrate multilevel inheritance with protected variables:

We have a base class Animal with a protected member name.
We then create an intermediate derived class Mammal that inherits from Animal and adds a protected member numLegs. This class represents a generic mammal.
Finally, we create the Dog class, which inherits from Mammal. Dog is a specific type of mammal, so it inherits both the name and numLegs members and adds its own method, Bark.
In the main function, we create an instance of the Dog class named myDog and call methods from all three levels of the inheritance hierarchy (Eat from Animal, Walk from Mammal, and Bark from Dog).
Protected members are accessible within the class that defines them and in derived classes, but they are not directly accessible from outside the class hierarchy.
This allows you to encapsulate data and behavior while still providing access within the inheritance hierarchy.

** ANSWER **

#include <iostream>
using namespace std;

// Base class
class Animal {
protected:
    string name;

public:
    Animal(string _name) : name(_name) {}

    void Eat() {
        cout << name << " is eating." << endl;
    }
};

// Intermediate derived class
class Mammal : public Animal {
protected:
    int numLegs;

public:
    Mammal(string _name, int _numLegs) : Animal(_name) // calling constructor of parent class
    {
        numLegs = _numLegs;
    }

    void Walk() {
        cout << name << " is walking on " << numLegs << " legs." << endl;
    }
};

// Final derived class inheriting from Mammal
class Dog : public Mammal {
public:
    Dog(string _name, int _numLegs) : Mammal(_name, _numLegs) {}

    void Bark() {
        cout << name << " is barking." << endl;
    }
};

int main() {
    // Create an instance of the Dog class
    Dog myDog("Buddy", 4);

    // Access and modify protected members
    myDog.Eat();
    myDog.Walk();
    myDog.Bark();

    return 0;
}
